<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>moontalk</title>
    <link>https://blog.moontalk.top/</link>
    <description>Recent content on moontalk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Jul 2021 19:50:11 +0800</lastBuildDate>
    
	<atom:link href="https://blog.moontalk.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tornado源码分析(2) - IOLoop</title>
      <link>https://blog.moontalk.top/post/tornado-code-analysis-2/</link>
      <pubDate>Tue, 27 Jul 2021 19:50:11 +0800</pubDate>
      
      <guid>https://blog.moontalk.top/post/tornado-code-analysis-2/</guid>
      <description>注：本文所分析 tornado 源码版本为 4.5.3 IOLoop 是对IO多路复用的封装，它实现了一个单例，将这个单例保存在 IOLoop._instance 中。 IOLoop 实现了 Reactor 模型，将所有要处理的IO事件注册到一</description>
    </item>
    
    <item>
      <title>Tornado源码分析(1) - Configurable</title>
      <link>https://blog.moontalk.top/post/tornado-code-analysis-1/</link>
      <pubDate>Tue, 27 Jul 2021 19:43:54 +0800</pubDate>
      
      <guid>https://blog.moontalk.top/post/tornado-code-analysis-1/</guid>
      <description>注：本文所分析 tornado 源码版本为 4.5.3 tornado.ioloop.IOLoop.instance().start()，这是 tornado 框架启动“事件循环”的标</description>
    </item>
    
    <item>
      <title>IO多路复用 - select、poll、epoll</title>
      <link>https://blog.moontalk.top/post/io-multiplexing/</link>
      <pubDate>Tue, 27 Jul 2021 19:37:19 +0800</pubDate>
      
      <guid>https://blog.moontalk.top/post/io-multiplexing/</guid>
      <description>承接上篇（I/O模式详解），这一节来整理一下关于IO多路复用的相关知识。 select、poll、epoll 都是IO多路复用的机制。IO多路复</description>
    </item>
    
    <item>
      <title>I/O模式详解</title>
      <link>https://blog.moontalk.top/post/io-mode-analysis/</link>
      <pubDate>Tue, 27 Jul 2021 19:28:34 +0800</pubDate>
      
      <guid>https://blog.moontalk.top/post/io-mode-analysis/</guid>
      <description>用户空间和内核空间 我们知道操作系统采用的是虚拟地址空间，以32位操作系统举例，它的寻址空间为4G(2的32次方)，这里解释二个概念: 寻址：是</description>
    </item>
    
    <item>
      <title>Linux资源隔离与资源限制实验</title>
      <link>https://blog.moontalk.top/post/resource-test/</link>
      <pubDate>Thu, 24 Jun 2021 15:00:26 +0800</pubDate>
      
      <guid>https://blog.moontalk.top/post/resource-test/</guid>
      <description>环境准备 系统：CentOS7 64位 配置：1核 2G内存 测试 chroot命令 概念： chroot，即 change root directory (更改 root 目录)。在 linux 系统中，系统默认的目</description>
    </item>
    
    <item>
      <title>从容器到容器云</title>
      <link>https://blog.moontalk.top/post/docker-and-k8s/</link>
      <pubDate>Tue, 22 Jun 2021 21:36:11 +0800</pubDate>
      
      <guid>https://blog.moontalk.top/post/docker-and-k8s/</guid>
      <description>前言 我认为在学习一门技术以前，首先得去了解一下这项技术的背景和发展史，这对后面理解“为什么这样设计”其实帮助很大。如果开源项目直接拿过来蒙头</description>
    </item>
    
    <item>
      <title>LVS-TUN模式集群防火墙下的调试之旅</title>
      <link>https://blog.moontalk.top/post/lvs-with-firewall/</link>
      <pubDate>Sun, 24 May 2020 21:19:54 +0800</pubDate>
      
      <guid>https://blog.moontalk.top/post/lvs-with-firewall/</guid>
      <description>一、集群说明 OS: CentOS7.2 DS(LVS): 10.1.61.114 LVS-MODE: TUN VIP: 10.1.61.82 RS1(Nginx): 10.1.62.105 RS2(Nginx): 10.1.62.106 PORT: 80 防火墙: DS、RS1、RS2均安装 firewalld，且开放80端口（tcp，udp） 二、预备知识 firewalld</description>
    </item>
    
  </channel>
</rss>